{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/create-portal/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Ordinary Days"}},"markdownRemark":{"id":"a64b31ee-38e7-5773-8a7d-fe99c944f63c","excerpt":"how to create portal? how to create fiber from portal object?","html":"<h2>how to create portal?</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @file react-dom\n */</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createPortal <span class=\"token keyword\">as</span> createPortalImpl<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-reconciler/src/ReactPortal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">children<span class=\"token operator\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n  container<span class=\"token operator\">:</span> Container<span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token operator\">?</span>string <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> React$Portal <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">invariant</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">isValidContainer</span><span class=\"token punctuation\">(</span>container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"Target container is not a DOM element.\"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// TODO: pass ReactDOM portal implementation as third argument</span>\n  <span class=\"token comment\">// $FlowFixMe The Flow type is opaque but there's no way to actually create it.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createPortalImpl</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @file react-reconciler/src/ReactPortal\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createPortal</span><span class=\"token punctuation\">(</span>\n  children<span class=\"token operator\">:</span> ReactNodeList<span class=\"token punctuation\">,</span>\n  containerInfo<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// TODO: figure out the API for cross-renderer implementation.</span>\n  implementation<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n  key<span class=\"token operator\">:</span> <span class=\"token operator\">?</span>string <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactPortal <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// This tag allow us to uniquely identify this as a React Portal</span>\n    $$<span class=\"token keyword\">typeof</span><span class=\"token operator\">:</span> <span class=\"token constant\">REACT_PORTAL_TYPE</span><span class=\"token punctuation\">,</span>\n    key<span class=\"token operator\">:</span> key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">,</span>\n    children<span class=\"token punctuation\">,</span>\n    containerInfo<span class=\"token punctuation\">,</span>\n    implementation<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>how to create fiber from portal object?</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @file packages/react-reconciler/src/ReactChildFiber.new.js\n */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> reconcileChildFibers <span class=\"token operator\">=</span> <span class=\"token function\">ChildReconciler</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> mountChildFibers <span class=\"token operator\">=</span> <span class=\"token function\">ChildReconciler</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">ChildReconciler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">shouldTrackSideEffects</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// a lot of methods</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">function</span> reconcileSinglePortal <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> reconcileChildFibers <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> reconcileChildFibers<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * @function reconcileChildFibers\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">reconcileChildFibers</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">returnFiber<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span>\n    currentFirstChild<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    newChild<span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span>\n    lanes<span class=\"token operator\">:</span> Lanes<span class=\"token punctuation\">,</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> newChild <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> newChild <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>newChild<span class=\"token punctuation\">.</span>$$<span class=\"token keyword\">typeof</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// ...</span>\n        <span class=\"token keyword\">case</span> <span class=\"token constant\">REACT_PORTAL_TYPE</span><span class=\"token operator\">:</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">placeSingleChild</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">reconcileSinglePortal</span><span class=\"token punctuation\">(</span>\n              returnFiber<span class=\"token punctuation\">,</span>\n              currentFirstChild<span class=\"token punctuation\">,</span>\n              newChild<span class=\"token punctuation\">,</span>\n              lanes<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">reconcileSinglePortal</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">returnFiber<span class=\"token operator\">:</span> Fiber<span class=\"token punctuation\">,</span>\n  currentFirstChild<span class=\"token operator\">:</span> Fiber <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  portal<span class=\"token operator\">:</span> ReactPortal<span class=\"token punctuation\">,</span>\n  lanes<span class=\"token operator\">:</span> Lanes</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Fiber <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> portal<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> child <span class=\"token operator\">=</span> currentFirstChild<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TODO: If key === null and child.key === null, then this only applies to</span>\n    <span class=\"token comment\">// the first item in the list.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n        child<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">===</span> HostPortal <span class=\"token operator\">&amp;&amp;</span>\n        child<span class=\"token punctuation\">.</span>stateNode<span class=\"token punctuation\">.</span>containerInfo <span class=\"token operator\">===</span> portal<span class=\"token punctuation\">.</span>containerInfo <span class=\"token operator\">&amp;&amp;</span>\n        child<span class=\"token punctuation\">.</span>stateNode<span class=\"token punctuation\">.</span>implementation <span class=\"token operator\">===</span> portal<span class=\"token punctuation\">.</span>implementation\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">deleteRemainingChildren</span><span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> existing <span class=\"token operator\">=</span> <span class=\"token function\">useFiber</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">,</span> portal<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        existing<span class=\"token punctuation\">.</span>return <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> existing<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">deleteRemainingChildren</span><span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">deleteChild</span><span class=\"token punctuation\">(</span>returnFiber<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    child <span class=\"token operator\">=</span> child<span class=\"token punctuation\">.</span>sibling<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> created <span class=\"token operator\">=</span> <span class=\"token function\">createFiberFromPortal</span><span class=\"token punctuation\">(</span>portal<span class=\"token punctuation\">,</span> returnFiber<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">,</span> lanes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  created<span class=\"token punctuation\">.</span>return <span class=\"token operator\">=</span> returnFiber<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> created<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"create portal","date":null,"description":null}},"previous":{"fields":{"slug":"/2021-02-14-monorepo-with-lerna-and-yarn/"},"frontmatter":{"title":"Monorepo with lerna and yarn"}},"next":null},"pageContext":{"id":"a64b31ee-38e7-5773-8a7d-fe99c944f63c","previousPostId":"7eb871f9-afd4-5d25-b513-a17a59cd8fc6","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3274528899"]}