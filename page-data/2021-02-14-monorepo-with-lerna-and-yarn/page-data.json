{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2021-02-14-monorepo-with-lerna-and-yarn/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Ordinary Days"}},"markdownRemark":{"id":"4517a729-5c8c-57bc-8bda-ab53a7894edc","excerpt":"直接在 lerna.json 中声明 packages: […]，lerna bootstrap 时会为每个 repo 单独装依赖，在使用 react 时就可能遇到invalid hook call warning错误，原因排除错误的使用了 hooks，就只有使用了多个 react 包。\n看了下堆栈，有两个 repo…","html":"<p>直接在 lerna.json 中声明 packages: […]，lerna bootstrap 时会为每个 repo 单独装依赖，在使用 react 时就可能遇到<a href=\"https://reactjs.org/warnings/invalid-hook-call-warning.html\">invalid hook call warning</a>错误，原因排除错误的使用了 hooks，就只有使用了多个 react 包。\n看了下堆栈，有两个 repo 使用了自己 node_modules 中的 react。</p>\n<!--truncate-->\n<p>直接<code class=\"language-text\">lerna bootstrap --hoist</code>，lerna 上来就是一个报错<code class=\"language-text\">hoist is not supported with --npm-client=yarn, use yarn workspaces instead</code>, 同时给出了一个提示<code class=\"language-text\">A guide is available at https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/</code>。</p>\n<p>好吧照提示中改了一下，在 lerna.json 中添加<code class=\"language-text\">\"useWorkspaces\": true</code>，同时将 packages 字段从 lerna.json 中移到 package.json 中的 <a href=\"https://docs.npmjs.com/cli/v7/configuring-npm/package-json#workspaces\">workspaces</a> 字段，然后 lerna bootstrap，这里 yarn 全权接手了依赖安装，共同依赖全装在了根目录，问题解决。</p>\n<p>修改前</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// lerna.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"npmClient\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"packages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"site\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//package.sjon</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>修改后</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// lerna.json</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"npmClient\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"useWorkspaces\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//package.sjon</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//...</span>\n  <span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"packages/*\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"site\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>其他</h2>\n<p>这里提一下，如果你有 package 使用了 webpack 打包，然后使用了<strong>webpack-node-externals</strong>排除 node_modules 中的第三方依赖，需要修改 webpack-node-externals 的设置<code class=\"language-text\">{ modulesFromFile: true }</code>。因为 webpack-node-externals 会遍历项目下的 node_modules 下的依赖名称，\n作为排除依据，但是我们的部分依赖被安装到了项目的根目录，所以 webpack-node-externals 会失效。这里设置<code class=\"language-text\">modulesFromFile: true</code>告诉\nwebpack-node-externals 直接去 package.json 中找依赖名称。当然你也可以通过设置<code class=\"language-text\">moduleDir</code>，告诉 webpack-node-externals 去哪里找\n安装的依赖包</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://reactjs.org/warnings/invalid-hook-call-warning.html\">https://reactjs.org/warnings/invalid-hook-call-warning.html</a></li>\n<li><a href=\"https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/\">https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/</a></li>\n</ul>","frontmatter":{"title":"Monorepo with lerna and yarn","date":null,"description":null}},"previous":null,"next":null},"pageContext":{"id":"4517a729-5c8c-57bc-8bda-ab53a7894edc","previousPostId":null,"nextPostId":null}},
    "staticQueryHashes": ["2841359383","3274528899"]}