<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Ordinary Days]]></title><description><![CDATA[something or nothing.]]></description><link>https://yuzhou.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 27 Aug 2021 10:14:06 GMT</lastBuildDate><item><title><![CDATA[Monorepo with lerna and yarn]]></title><description><![CDATA[直接在 lerna.json 中声明 packages: […]，lerna bootstrap 时会为每个 repo 单独装依赖，在使用 react 时就可能遇到invalid hook call warning错误，原因排除错误的使用了 hooks…]]></description><link>https://yuzhou.github.io/2021-02-14-monorepo-with-lerna-and-yarn/</link><guid isPermaLink="false">https://yuzhou.github.io/2021-02-14-monorepo-with-lerna-and-yarn/</guid><content:encoded>&lt;p&gt;直接在 lerna.json 中声明 packages: […]，lerna bootstrap 时会为每个 repo 单独装依赖，在使用 react 时就可能遇到&lt;a href=&quot;https://reactjs.org/warnings/invalid-hook-call-warning.html&quot;&gt;invalid hook call warning&lt;/a&gt;错误，原因排除错误的使用了 hooks，就只有使用了多个 react 包。
看了下堆栈，有两个 repo 使用了自己 node_modules 中的 react。&lt;/p&gt;
&lt;!--truncate--&gt;
&lt;p&gt;直接&lt;code class=&quot;language-text&quot;&gt;lerna bootstrap --hoist&lt;/code&gt;，lerna 上来就是一个报错&lt;code class=&quot;language-text&quot;&gt;hoist is not supported with --npm-client=yarn, use yarn workspaces instead&lt;/code&gt;, 同时给出了一个提示&lt;code class=&quot;language-text&quot;&gt;A guide is available at https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;好吧照提示中改了一下，在 lerna.json 中添加&lt;code class=&quot;language-text&quot;&gt;&quot;useWorkspaces&quot;: true&lt;/code&gt;，同时将 packages 字段从 lerna.json 中移到 package.json 中的 &lt;a href=&quot;https://docs.npmjs.com/cli/v7/configuring-npm/package-json#workspaces&quot;&gt;workspaces&lt;/a&gt; 字段，然后 lerna bootstrap，这里 yarn 全权接手了依赖安装，共同依赖全装在了根目录，问题解决。&lt;/p&gt;
&lt;p&gt;修改前&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// lerna.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;npmClient&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;yarn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;packages&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;packages/*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;site&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//package.sjon&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;修改后&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// lerna.json&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;npmClient&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;yarn&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;useWorkspaces&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;//package.sjon&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;workspaces&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;packages/*&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;site&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;其他&lt;/h2&gt;
&lt;p&gt;这里提一下，如果你有 package 使用了 webpack 打包，然后使用了&lt;strong&gt;webpack-node-externals&lt;/strong&gt;排除 node_modules 中的第三方依赖，需要修改 webpack-node-externals 的设置&lt;code class=&quot;language-text&quot;&gt;{ modulesFromFile: true }&lt;/code&gt;。因为 webpack-node-externals 会遍历项目下的 node_modules 下的依赖名称，
作为排除依据，但是我们的部分依赖被安装到了项目的根目录，所以 webpack-node-externals 会失效。这里设置&lt;code class=&quot;language-text&quot;&gt;modulesFromFile: true&lt;/code&gt;告诉
webpack-node-externals 直接去 package.json 中找依赖名称。当然你也可以通过设置&lt;code class=&quot;language-text&quot;&gt;moduleDir&lt;/code&gt;，告诉 webpack-node-externals 去哪里找
安装的依赖包&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://reactjs.org/warnings/invalid-hook-call-warning.html&quot;&gt;https://reactjs.org/warnings/invalid-hook-call-warning.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/&quot;&gt;https://yarnpkg.com/blog/2017/08/02/introducing-workspaces/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>